combi <- c(1,2,3:10,NA,12:15)
combi
#### **3.1.1 Vectores: Indexación**
## La indexación en R comienza en 1. No 0 como en algunos lenguajes (por ejemplo, Python y JavaScript).
## Podemos usar `[]` para indexar objetos que creamos en R.
combi[11]
num
num <- -10:5
num
p
#### **3.1.2 Vectores: extraer valores usando operadores lógicos o aritméticos**
primeros_num <- num[-5]
primeros_num
test <- num >0
combi[11]
#### **3.1.2 Vectores: extraer valores usando operadores lógicos o aritméticos**
primeros_num <- num[5]
primeros_num
#### **3.1.2 Vectores: extraer valores usando operadores lógicos o aritméticos**
primeros_num <- num[-5]
primeros_num
primeros_num
num[test]
#### **3.1.3 Vectores: atributos**
x = c(1,1,1,2:8)
x[x %in% 1:3]
length(primeros_num)
y <- x[x %in% 1:3]
length(y)
num
primeros_num
##### **3.2.1 Matrices: Numéricas**
mtcars
class(mtcars)
num
primeros_num
u <- x[-1]
u
x
u <- x[-8]
u
m1 <- as.matrix()
m1 <- as.matrix(mtcars)
length(m1)
dim(m1)
m1[1,1]
View(m1)
df <- m1
rownames(df)
m1[1,1]
m1[1,1] = "hola"
m1[1,1]
#### **4.3 `tibble()` o `data.frame()`**
vignette("tibble")
list()
ls()
## limpiar entorno
rm(list=ls())
ain <- "C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Septimo semestre\macro3\Taller 3"
rm(list=ls())
main <- "C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Septimo semestre\macro3\Taller 3"
main <- "C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Septimo semestre\macro3\Taller 3"
# File Paths:
main <- "C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Septimo semestre\macro3\Taller 3"
main <- "C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Septimo semestre\macro3\Taller 3"
main <- "C:/Users/richa
etwd(main)
setwd(main)
set.seed(123)
hc <- function(x, alpha, beta, b){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+b))**(1/(1-aplha))-1-b*(1-x)
return(valor)
}
#valores de los parametros#
alpha <- 0.60
b <- 0.50
beta <- 0.70
#grafica de la función#
curve(hc(x, alpha, beta, b),
from = 0,
to= 1,
xlab = "proporcion del tiempo dedicado a trabajar",
ylab = "cambio relativo del capital humano",
main="hallar la raiz tal que su resultado es cero")
#absisa#
abline(h=0, col= "blue")
rm(list=ls())
# Gráfica de la solución.
abline(v = solution, col = "red")
hc <- function(x, alpha, beta, b){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
#valores de los parametros#
alpha <- 0.60
D <- 0.50
beta <- 0.70
hc <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
#valores de los parametros#
alpha <- 0.60
D <- 0.50
beta <- 0.70
#grafica de la función#
curve(hc(x, alpha, beta, b),
from = 0,
to= 1,
xlab = "proporcion del tiempo dedicado a trabajar",
ylab = "cambio relativo del capital humano",
main="hallar la raiz tal que su resultado es cero")
#absisa#
abline(h=0, col= "blue")
#definimos la función:
hc <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
#valores de los parametros#
alpha <- 0.60
D <- 0.50
beta <- 0.70
#grafica de la función#
curve(hc(x, alpha, beta, D),
from = 0,
to= 1,
xlab = "proporcion del tiempo dedicado a trabajar",
ylab = "cambio relativo del capital humano",
main="hallar la raiz tal que su resultado es cero")
#absisa#
abline(h=0, col= "blue")
abord
abort
rm(list=ls())
rm(list=ls())
hc <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
curve(hc(x, alpha, beta, D),
from = 0,
to= 1,
xlab = "proporcion del tiempo dedicado a trabajar",
ylab = "cambio relativo del capital humano",
main="hallar la raiz tal que su resultado es cero")
log_num <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
alpha <- 0.60
beta <- 0.70
D <- 0.50
curve(log_num(x, alpha, beta),
from = 0,
to = 5,
xlab = "x",
ylab = "y",
main = "¿Cómo hallar la raíz de esta función?")
# Gráfica de la función.
curve(log_num(x, alpha, beta, D),
from = 0,
to = 5,
xlab = "x",
ylab = "y",
main = "¿Cómo hallar la raíz de esta función?")
main <- "C:/Users/richa/OneDrive - Universidad de los Andes/Universidad/Septimo semestre/macro3/Taller 3"
setwd(main
setwd(main)
set.seed(123)
log_num <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
alpha <- 0.60
beta <- 0.70
D <- 0.50
set.seed(123)
setwd(main)
rm(list=ls())
setwd(main)
log_num <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
log_num <- function(x, alpha, beta, D){
valor <- (beta*(((2*alpha-1)/(1-aplha))*b*x+1+D))**(1/(1-aplha))-1-D*(1-x)
return(valor)
}
# Defini
rm(list=ls())
x = NULL
x[1]=0
for(i in 2:1000){
x[i] = x[i-1] + rnorm(1)
}
random_walk = ts(x)
plot(random_walk, main= "A random walk", ylab= '', xlab = 'Days', col = 'blue', lwd = 2)
acf(random_walk)
diff_random_walk = diff(random_walk)
plot(diff_random_walk, main= "A pure random process", ylab= '', xlab = 'Days', col = 'blue', lwd = 2)
acf(diff_random_walk
# Generamos los ruidos
noise = rnorm(10000)
noise = rnorm(10000)
ma_2 = NULL
for(i in 3:10000){
ma_2[i] = noise[i]+0.7*noise[i-1]+0.2*noise[i-2]
}
# Nos movemos a la izquierda en dos unidades
moving_average_process = ma_2[3:10000]
moving_average_process = ts(moving_average_process)
original_par <- par()
par(mfrow=c(2,1))
plot(moving_average_process, main = 'A moving average process of order 2', ylab = '', col = 'blue')
acf(moving_average_process, main = 'Correlograma de un proceso MA(2)')
set.seed(2024)
N=1000
phi=0.4
noise=rnorm(N,0,1)
Z=NULL
Z[1] = noise[1]
for(t in 2:N){
Z[t] = noise[t] + phi*Z[t-1]
}
Z = ts(Z)
# Graficamos
par(mfrow = c(2,1))
plot(Z, main = "AR(1) Serie de tiempo con ruido blanco, phi = 0.4")
acf(Z, main = "AR(1) Serie de tiempo con ruido blanco, phi=0.4")
"Simulamos un proceso AR(1) con phi=1, lo cual es equivalente a una caminata aleatoria"
set.seed(2022)
N=1000
phi=1
noise=rnorm(N,0,1)
Z=NULL
Z[1] = noise[1]
for(t in 2:N){
Z[t] = noise[t] + phi*Z[t-1]
}
# Convertimos la serie
Z = ts(Z)
# Graficamos
par(mfrow = c(2,1))
plot(Z, main = "AR(1) Serie de tiempo con ruido blanco, phi = 1")
acf(Z, main = "AR(1) Serie de tiempo con ruido blanco, phi=1")
"Simulamos un proceso AR(2)"
#phi1 = 0.7; phi2= 0.2
Z_ts = arima.sim(list(ar=c(0.7,0.2)),n=1000)
# Graficamos
par(mfrow = c(2,1))
plot(Z_ts, main= "AR(2) Serie de tiempo, phi1 = 0.7, phi2 = 0.2")
acf(Z_ts, main= "Funcion de autocorrelacion de un AR(2)")
# Cambiando los parametros
phi1 = .4; phi2 = .3;
X.ts <- arima.sim(list(ar = c(phi1, phi2)), n=1000)
# Graficamos
par(mfrow = c(2,1))
plot(X.ts,main=paste("AR(2) Time Series, phi1=",phi1,"phi2=",phi2))
acf(X.ts, type = "partial", main="ACF")
"Simulamos un ARIMA"
set.seed(500)
data = arima.sim(list(order=c(1,0,0),ar=-0.7), n=1000000)
par(original_par)
plot(data, main= "ARIMA(1,1) Time series: phi=.7,theta1=.2", xlim = c(0,400))
par(mfrow=c(2,1))
acf(data, main = "FACS")
acf(data, type = "partial", main = "FACP")
par(original_par)
################################################
"Datos del numero de descubrimientos desde 1880"
################################################
plot(discoveries, main = "Descubrimientos en un a?o")
stripchart(discoveries, method = "stack", offset=0.5, at=.15,pch=19,main = "Numero de descubrimientos", xlab = "Numero de descubrimientos en un a?o", ylab ="Frecuencia")
acf(discoveries, main = "FACS de numeros de descubrimientos en un a?o")
acf(discoveries, type = "partial", main= "FACP de numero de descubrimientos en un a?o")
"Proponemos varios modelos y elegimos aquel con el criterio de Akaike menor"
AIC(arima(discoveries, order=c(0,0,1)))
AIC(arima(discoveries, order=c(0,0,2)))
AIC(arima(discoveries, order=c(0,0,3)))
AIC(arima(discoveries, order=c(0,0,4)))
AIC(arima(discoveries, order=c(1,0,0)))
AIC(arima(discoveries, order=c(2,0,0)))
AIC(arima(discoveries, order=c(2,0,1)))
AIC(arima(discoveries, order=c(2,0,2)))
AIC(arima(discoveries, order=c(1,0,1)))
AIC(arima(discoveries, order=c(3,0,2)))
"Estimamos el modelo ARMA(1,1)"
model <- arima(discoveries, order=c(1,0,1))
SSE1 = model$residuals
plot(SSE1)
acf(SSE1, main = "FACS")
"Libor"
install.packages("readxl")
library(readxl)
libor = read_xlsx("C:/Users/jl.montero/OneDrive - Universidad de los Andes/PROYECTOS 2024/Uniandes/Clases/Econometr?a II/Complementarias/Clases/Clase 6/Libor.xlsx")
install.packages("readxl")
library(readxl)
libor = read_xlsx("C:\Users\richa\OneDrive - Universidad de los Andes\Universidad\Intersemestral\ecometria 2\series de tiempo\Libor.xlsx")
install.packages("readxl")
rm(list=ls())
require(pacman)
p_load(tidyverse,stargazer,coefplot,rio,skimr, sf, leaflet, tmaptools,ggmap,osmdata, rvest, wordcloud, purrr, dplyr, tm, ggmap, maps, ggplot2, ggspatial,ggsn)
require(pacman)
install.packages("pacman")
require(pacman)
p_load(tidyverse,stargazer,coefplot,rio,skimr, sf, leaflet, tmaptools,ggmap,osmdata, rvest, wordcloud, purrr, dplyr, tm, ggmap, maps, ggplot2, ggspatial,ggsn)
setwd("C:\Users\richa\Music\R practica\Input")
setwd("C:/Users/richa/Music/R practica/Input")
setwd("C:/Users/richa/Music/R practica")
df <- import("Input/20240607_Tarea_01")
df <- import("Input/20240607_Tarea_01.dta")
View(df)
View(df)
require(pacman)
p_load(stargazer)
help(package = "stargazer")
modelo1 <- lm(salario ~ edad as.factor(property_type), data = df)
modelo1 <- lm(salario ~ edad + as.factor(property_type), data = df)
,
odelo1 <- lm(salario ~ edad, data = df)
modelo1 <- lm(salario ~ edad, data = df)
stargazer(modelo1, type = "text")
modelo2<- lm(salario ~ edad + esc + area, data = df)
stargazer(modelo1, modelo2, type = "text",out = "output")
stargazer(modelo1, modelo2, type = "text",out = "output/resultados_regresión.xlx")
stargazer(modelo1, modelo2, type = "text",out = "output/resultados_regresión.xlsx")
stargazer(modelo1, modelo2, type = "text",out = "output/resultados_regresión.doc"
stargazer(modelo1, modelo2, type = "text",out = "output/resultados_regresión.docx")
stargazer(modelo1, modelo2,
type = "text",out = "output/resultados_regresión.docx")
stargazer(modelo1, modelo2,
type = "text",out = "output/resultados_regresión.pdf")
stargazer(modelo1, modelo2,
type = "text",out = "output/resultados_regresión.xlsx")
plot(df$age, df$salario,
main = "Regresión lineal: salario vs. edad",
xlab = "Edad",
ylab = "Salario",
pch = 19, # Punto sólido
col = "blue")
plot(df$age, df$salario)
length(df$salario)
lenght(df$edad)
length(df$edad)
df_clean<- na.omit(df[,c("salario", "age")])
p_load(stargazer, dplyr)
df_clean<- subset(df, !is.na(salario))
View(df_clean)
modelo1 <- lm(salario ~ edad, data = df_clean)
modelo2<- lm(salario ~ edad + esc + area, data = df_clean)
stargazer(modelo1, modelo2,
type = "text",out = "output/resultados_regresión.xlsx")
plot(df_clean$edad, df_clean$salario)
plot(df_clean$edad, df_clean$salario,
main = "grafico de dispersion",
xlab = "edad",
ylab = "salario")
abline(modelo2, col = "red", lwd = 2)
abline(modelo1, col = "red", lwd = 2)
plot(df_clean$edad, df_clean$salario,
main = "grafico de dispersion",
xlab = "edad",
ylab = "salario")
abline(modelo1, col = "blue", lwd = 2)
abline(modelo1, col = "blue", lwd = 2)
legend(x = "edad", y="salario")
legend("bottomleft", legend = c("Datos", "Línea de Regresión"))
