m
dir()
dir()
my_html = read_html(url)
my_html %>% html_element(xpath = '//*[@id="firstHeading"]/span') %>% html_text()
#librerias
require(pacman)
p_load(tidyverse,stargazer,coefplot,rio,skimr, sf, leaflet, tmaptools,ggmap,osmdata, rvest, wordCloud2)
p_load(tidyverse,stargazer,coefplot,rio,skimr, sf, leaflet, tmaptools,ggmap,osmdata, rvest, wordCloud)
updateR()
updateR(
fast = FALSE,
browse_news = TRUE,
install_R = FALSE,
copy_package = FALSE,
copy_Rprofile.site = FALSE,
keep_old_packages = FALSE,
update_packages = TRUE
)
install.packages("installr")
p_load("installr")
require(pacman)
p_load("installr")
updateR()
install.packages("installr")
install.packages("installr")
updateR()
1
library(installr)
updateR()
version
help(package="googledrive")
help(package="rio")
install.packages("wooldridge")
install.packages("AER", "car", "censReg", "dummies")
install.packages("AER","car","censReg","dummies")
#descargar librerias importantes
install.packages(c("AER", "car", "censReg","dplyr", "dummies", "dynlm",
"effects", "ggplot2", "lmtest", "maps", "mfx", "orcutt", "plm",
"quantmod", "sandwich", "quantreg", "rio", "rmarkdown", "sample selection",
"stargazer", "survival", "systemfit", "truncreg", "tseries",
"ulcra", "xtable", "vars", "WDI", "wooldridge", "xts", "zoo"))
#obtener directorio de trabajoo
getwd()
setwd("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R")
########funciones Aritmericas#############
#valor absoluto
x<- -4
abs(x)
#raiz cuadrada
sqrt(x)
#raiz cuadrada
sqrt(abs(x))
#exponencial
exp(x)
#logaritmo
log(x)
#logaritmo
log(abs(x))
log(a,b)
#logaritmo de a en base b
a<- 10
b<- 4
log(a,b)
#redondear un numero a con b digitos
round(a,b)
#logaritmo de a en base b
a<- 0.09
#redondear un numero a con b digitos
round(a,b)
#factorial
factorial(b)
#combinatoria/ coeficiente binomial
choose(a,b)
#combinatoria/ coeficiente binomial
choose(a,b)
###########Incluir elementos dentro de elementos
x <- 3 + exp(a)
y <- x^2
#####vectores
x <- c(1,2,3,4,5)
b <- x + 1
b
y <- x + 1
z <- x+y
w <-z*y
exp(w)
#funciones para analizar vectores
lenght(X)
#funciones para analizar vectores
length(X)
#funciones para analizar vectores
length(x)
max(x)
min(x)
sort(x)
sort(z)
u <- c(3,5 2,1,0)
u <- c(3,5,2,1,0)
sort(u)
sum(x)
prod(x)
numeric(n)
numeric(x)
seq(10)
seq(2,10)
seq(1,10,2)
##operadores logicos##
x==y
x<y
x<=y
x>y
x>z
x=!
x=!y
x!=y
!x
a|b
a&b # a y b son verdaderos
##nota: los vectores no necesariamente deben ser numericos, tambien pueden ser strings
ciudades <- c("bogota", "munich", "buenos aires")
ciudades
ciudades == y
ciudades != x
#incluir etiquetas a vectores
xe <- factor(x, labels =c("pequeno", "grande"))
#incluir etiquetas a vectores
xe <- factor(x, labels =c("pequeno", "mediano", "grande", "extra grande", "gigantesco"))
xe
#indexar
x <- seq(1,10)
elemento3dex <- x[3]
elemento3dex
#ponerle nombre a vectores
x<- seq(1,3)
rm(list=ls())
#ponerle nombre a vectores
x<- seq(1,3)
equis <- c("uno", "dos", "tres")
names(x) <- equis
x
sqrt(x)
max(x)
A <- martix(v, nrows=2)
A <- matrix(v, nrows=2)
A <- matrix(v, nrows=2)
######crear matrices#####
v <- c(1,2,3,4)
A <- matrix(v, nrows=2)
A <- matrix(v, nrow=2)
View(A)
A <- matrix(v, nrow=3)
A <- matrix(v, nrow=2)
fila1<- c(1,2) ; fila2 <- c(3,4)
A2 <- rbind(fila1, fila2)
View(A2)
col<- c(1,3) ; col<-c(2,4)
col1<- c(1,3) ; col2<-c(2,4)
A3 <- cbind(col1, col2)
View(A3)
A3 <- cbind(col1, col2)  # por sus siglas: columbind, incluye columnas
View(A)
colnames(A) <- c("columna1", "columna2")
rownames(A) <- c("fila1","filas2")
rownames(A) <- c("fila1","fila2")
## Diaogonal de una matrix, identidad, indexar matrices y operaciones ##
A <- diag(c(4,3,2))
A
B <- diag(3)
B
A*B
#transpuesta
a <- t(A)
a
C <- A%*%B
C
A <- colbind(c(4, 0, 1))
A <- cbind(c(4, 0, 1))
## Diaogonal de una matrix, identidad, indexar matrices y operaciones ##
A <- diag(c(4,3,2)) %>% cbind(c(4,0,1))
require(pacman)
p_load(dplyr)
## Diaogonal de una matrix, identidad, indexar matrices y operaciones ##
A <- diag(c(4,3,2)) %>% cbind(c(4,0,1))
rm(list=ls())
## Diaogonal de una matrix, identidad, indexar matrices y operaciones ##
A <- diag(c(4,3,2)) %>% cbind(c(4,0,1))
## Diaogonal de una matrix, identidad, indexar matrices y operaciones ##
A <- diag(c(4,3,2)) %>% cbind(c(4,0,1)) %>% rbind(c(0,3,4))
View(A)
lista1 <- list(x=seq(1,10, 2), F=matrix(c(1,2,3,4), nrow=2),
ciudades = c("cartagena","medellin", "moscow"))
#extraemos el primer elemento de la lista
lista1$x
#extraemos el segundo elemento de la lista
lista1$f
View(lista1)
#extraemos el segundo elemento de la lista
lista1$F
#extraemos el tercer elemnto de la lista
lista1$ciudades
Matriz <- matrix(c(1,2,3,4,5,6), ncol = 3)
df <- as.data.frame(Matriz)
View(df)
#anadir nombres a  un data frame#
#supongamos que las variables son productos y las observaciones son tiendas
productos <- c("producto1","producto2", "producto3")
tiendas  <- c("tienda1", "tienda2")
#le agregamos los nombres respectivos para cada tienda
colnames(df) <- productos
rownames(df) <- tiendas
df
View(df)
producto1$tienda1
df$producto1
df$producto1 + df$producto2
df$tienda1
df$producto1 + df$producto2 + df$producto3
# con el comando rbind y cbind juntamos nuevas observaciones y nuevas variables
#respectivamente
#supongamos que queremos totalizar el numero de productos de cada tienda
df$total <- df$producto1 + df$producto2 + df$producto3
tienda3 <- seq(4,6)
require(dplyr)
help(mutate)
df <- add_row(df, tienda3)
df <- add_row(df,tienda3)
df <- df %>% add_row(df, tienda3)
tienda3 <- c(4,6,7)
df <- df %>% add_row(df, tienda3)
df <- df %>% add_row(df, "tienda3", producto1=4, producto2=6, producto3=7)
df_m <- subset(df, total>=10)
View(df_m)
str(df)
colMeans(df) # promedio de los producto
rowMeans(df) #promedio de las tiendas
summary(df)
save(list=ls(), file = "Datoejercicio.pdf")
save(list=ls(), file = "Datoejercicio.RData")
#por ejemplo
curve(exp(x), 0, 1)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- seq(1,100, 2)
y <- seq(1,100,2)
plot(x,y)
y <- seq(1,100,3)
plot(x,y)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- seq(1,1000, 2)
y <- seq(1,100,3)
plot(x,y)
y <- seq(1,1000,3)
plot(x,y)
y <- seq(1,1000,2)
plot(x,y)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,6,3,63,3)
y <- c(6,7,3,7,4)
plot(x,y)
# al comando plot le podemos anadir tipos de funcion al grafico de dispercion
plot(x,y,type=1)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,6,3,6,3)
y <- c(6,7,3,7,4)
plot(x,y)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,2,4,5,6)
y <- c(3,7,3,7,10)
plot(x,y)
# al comando plot le podemos anadir tipos de funcion al grafico de dispercion
plot(x,y,type=1)
# al comando plot le podemos anadir tipos de funcion al grafico de dispercion
plot(x,y,type="l")
plot(x,y,type="b")
plot(x,y,type="o")
plot(x,y, type="s")
plot(x,y,type="h")
helpt(lty)
curve( dnorm(x,0,1), -10, 10)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=2)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,2), -10, 10, lwd=1, lty=2)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,2), -10, 10, lwd=1, lty=2)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,2), add = TRUE, lwd=1, lty=2)
curve(dnorm(x,0,3), add= TRUE, lwd=1,lty=3)
#plot
plot(x,y)
text(5,10, "outlier", pos=3)
plot(x,y)
points(6,10)
text(5,10, "outlier", pos=3)
arrows(5,10,6,10, length = 0,15)
plot(x,y)
points(6,10)
text(5,10, "outlier", pos=3)
arrows(5,10,6,10, length = 0,15)
#plot
plot(x,y, main="outlier")
points(6,10)
text(5,10, "outlier", pos=3)
arrows(5,10,6,10, length = 0,15)
arrows(5,10,6,10, length = 0.15)
text(5,10, "outlier", pos=3)
text(5,0, "outlier", pos=3)
text(5,9, "outlier", pos=3)
anos <- c("2001", "2002", "2003", "2004", "2005", "2006")
ventas <- c(3,2,1,5,7,9)
p1 <- c(3,2,1,5,7,9)
p3 <- c(3,1,0,4,6,2)
p2 <- c(3,4,6,7,3,1)
sales <- cbind(p1,p2,p3)
sales
matplot(year, sales, type = "b", lwd=c(1,2,3), col="black")
matplot(anos, sales, type = "b", lwd=c(1,2,3), col="black")
sales2 <- rbind(p1,p2,p3)
View(sales)
View(sales2)
sales <- cbind(p1,p2,p3)
matplot(anos,sales, type = "b", lwd=c(1,2,3), col="black")
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,2), add = TRUE, lwd=1, lty=2)
curve(dnorm(x,0,3), add= TRUE, lwd=1,lty=3)
#incluimos una leyenda
legend("toprigth", c("sigma=1", "sigma2=2", "sigma3=3"), lwd=1:3,lty = 1:3)
#incluimos una leyenda
legend("topright", c("sigma=1", "sigma2=2", "sigma3=3"), lwd=1:3,lty = 1:3)
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/grafica/
outlierconlinea.pdf", width = 4, height=3)
dev.off()
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/grafica/
outlierconlinea.pdf", width = 4, height=3)
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/grafica/outlierconlinea.pdf", width = 4, height=3)
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/grafica/outlierconlinea.pdf", width = 4, height=3)
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/graficas/outlierconlinea.pdf", width = 4, height=3)
#plot y guardar plot
plot(x,y, main="outlier")
points(6,10)
text(5,9, "outlier", pos=3)
arrows(5,10,6,10, length = 0.15)
pdf("C:/Users/richa/Music/Este pc/GIthub/Ejercicios-R/Introducción a R/graficas/outlierconlinea.pdf", width = 4, height=3)
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,2,4,5,6)
y <- c(3,7,3,7,10)
rm(list=ls())
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,2,4,5,6)
y <- c(3,7,3,7,10)
#plot y guardar plot
plot(x,y, main="outlier")
points(6,10)
text(5,9, "outlier", pos=3)
arrows(5,10,6,10, length = 0.15)
plot(x,y)
rm(list=ls())
#tambien podemos utilizar plot para crear un grafico de dispercion
x<- c(1,2,4,5,6)
y <- c(3,7,3,7,10)
plot(x,y)
curve( dnorm(x,0,1), -10, 10, lwd=1, lty=1)
curve( dnorm(x,0,2), add = TRUE, lwd=1, lty=2)
#manipulacion de datos
require(pacman)
p_load(dplyr,ggplot2)
head(mpg)
ggplot() + geom_point(data =mpg, mapping= aes(x=displ, y=hwy)) +
geom_smooth(data=mpg, mapping=aes(displ,hwy))
ggplot() + geom_point(data =mpg, mapping= aes(x=displ, y=hwy)) +
geom_smooth(data=mpg, mapping=aes(x=displ,y=hwy))
#ejercicio con datos del indice de desarrollo#
require(pacman)
p_load(ggplot2, dplyr, WDI)
df <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014)
df_new <- filter(df, iso2c=="US") %>% rename(LE_fem=SP.DYN.LE00.FE.IN) %>%
select(year, LE_fem) %>% arrange(year)
df
df_new
View(df_new)
View(df)
#primero obtenemos la expectativa de vida
df_le <- as.data.frame(WDI$country, stringsAsFactors = FALSE) %>% select(country,)
#primero obtenemos la expectativa de vida
df_le <- as.data.frame(WDI$country, stringsAsFactors = FALSE) %>% select(country,income)
WDI_data
#primero obtenemos la expectativa de vida
df_le <- as.data.frame(WDI_data$country, stringsAsFactors = FALSE) %>% select(country,income)
View(df_le)
x <- WDI_data
View(x)
ggplot(df_new, mapping = aes(x=year,y=LE_fem)) + geom_line() + labs(title= "lifeexpectancy of women in EE.UU",
subtitle="WDI indicators",
x = "years",
y="Expectativa de vida")
df_countryIncome <- as.data.frame(WDI_data$country, stringsAsFactors = FALSE) %>%
select(country, income)
rm(list=ls())
df_countryIncome <- as.data.frame(WDI_data$country, stringsAsFactors = FALSE) %>%
select(country, income)
df <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014)
df_new <- filter(df, iso2c=="US") %>% rename(LE_fem=SP.DYN.LE00.FE.IN) %>%
select(year, LE_fem) %>% arrange(year)
View(df_new)
df_new <- filter(df, iso2c=="US") %>% rename(LE_fem=SP.DYN.LE00.FE.IN) %>%
select(year, LE_fem, country) %>% arrange(year)
View(df_new)
data_completa <- left_join(df_new, df_countryIncome)
View(data_completa)
data_completa2 <- union_all(df_new, df_countryIncome)
data_completa2 <- right_join(df_new, df_countryIncome)
View(data_completa2)
rm(list=data_completa2)
rm(list=ls(\))
rm(list=ls())
df_new <- filter(df, iso2c=="US") %>% rename(LE_fem=SP.DYN.LE00.FE.IN) %>%
select(year, LE_fem, country) %>% arrange(year)
df <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014)
df_new <- filter(df, iso2c=="US") %>% rename(LE_fem=SP.DYN.LE00.FE.IN) %>%
select(year, LE_fem, country) %>% arrange(year)
df_countryIncome <- as.data.frame(WDI_data$country, stringsAsFactors = FALSE) %>%
select(country, income)
data_completa <- left_join(df_new, df_countryIncome)
#vamos a crear una nueva variable
summarize(data_completa, LE_avg= mean(Le_fem, na.rm= TRUE))
#vamos a crear una nueva variable
summarize(data_completa, LE_avg= mean(LE_fem, na.rm= TRUE))
LE_avg
data_completaEEUU <- left_join(df_new, df_countryIncome)
#ahora supongamos que queremos encontrar el promedio de expectativa de vida para
#todos los paises
#1. encontramos la base de datos de la expectativa de vida
df_total <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014)
view(df_total)
View(df_total)
#ahora supongamos que queremos encontrar el promedio de expectativa de vida para
#todos los paises
#1. encontramos la base de datos de la expectativa de vida
df_total <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014) %>%
rename(LE="SP.DYN.LE00.FE.IN")
#ahora supongamos que queremos encontrar el promedio de expectativa de vida para
#todos los paises
#1. encontramos la base de datos de la expectativa de vida
df_total <- WDI(indicator = c("SP.DYN.LE00.FE.IN"), start = 1960, end = 2014) %>%
rename(LE=SP.DYN.LE00.FE.IN)
Le_avg <- summarize(df_total, Le_avg=mean(LE, na.rm=TRUE))
Le_avg
dfcompleta <- left_join(df_total,df_countryIncome)
View(dfcompleta)
#3. creamos la variable para el promedio de la expectativa de vida para los paises\
promTotal <- dfcompleta %>%
filter(income!="Aggregates") %>%
filter(income != "Not classified")%>%
group_by(income, year) %>%
summarize(LE_prom= mean(LE, na.rm=TRUE))
View(promTotal)
#3. creamos la variable para el promedio de la expectativa de vida para los paises\
promTotal <- dfcompleta %>%
filter(income!="Aggregates") %>%
filter(income != "Not classified")%>%
group_by(income, year) %>%
summarize(LE_prom= mean(LE, na.rm=TRUE)) %>%
ungroup()
View(promTotal)
prom222 <- dfcompleta %>%
filter(income!="Aggregates") %>%
filter(income != "Not classified")%>%
summarize(LE_prom= mean(LE, na.rm=TRUE)) %>%
ungroup()
View(prom222)
ggplot(promTotal, mapping= aes(x=year, y= LE_prom, color = income)) + geom_line()
